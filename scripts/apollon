#!/usr/bin/env python3

# Licensed under the terms of the BSD-3-Clause license.
# Copyright (C) 2019 Michael Bla√ü
# michael.blass@uni-hamburg.de

"""Launch the apollon main app."""

import sys
import argparse
import subprocess

import apollon
from apollon import commands


_valid_subcommand = ('features', 'onsets', 'hmm', 'som', 'export')


def _parse_cml(argv):
    parser = argparse.ArgumentParser('Apollon main app')
    parser.add_argument(
        '--version', action='version', version=apollon.__version__,
        help='Display apollon version.')

    subparsers = parser.add_subparsers()
    sp_features = _create_subparser_features(subparsers)
    sp_hmm = _create_subparser_hmm(subparsers)

    return parser.parse_args(argv[1:])


def _create_subparser_features(subparsers):
    sp_features = subparsers.add_parser('features', help='')
    sp_features.add_argument(
        '--rhythm', action='store_true',
        help='Extract features for rhythm track.')

    sp_features.add_argument(
        '--timbre', action='store_true',
        help='Extract features for timbre track.')

    sp_features.add_argument(
        '--pitch', action='store_true',
        help='Extract pitch track features')

    sp_features.add_argument(
        '--export', type=str, action='store')

    sp_features.add_argument(
        '-o', '--outpath', action='store', help='Output file path.')

    sp_features.add_argument('file', type=str, nargs=1)
    sp_features.set_defaults(func=commands.apollon_features.main)

    return sp_features


def _create_subparser_hmm(subparsers):
    sp_hmm = subparsers.add_parser('hmm', help='Train HMMs')

    sp_hmm.add_argument(
        'track_file', type=str, action='store',
        help='Path to track file.')

    sp_hmm.add_argument(
        'feature_path', type=str, action='store',
        help='Specifies feature within track file.')

    sp_hmm.add_argument(
        '-m', '--mstates', type=int, action='store',  default=4,
        help='Number of HMM states.')

    sp_hmm.add_argument(
        '-o', '--outpath', type=str, action='store',
        help='Output file path.')

    sp_hmm.set_defaults(func=commands.apollon_hmm.main)
    return sp_hmm


def main(argv=None):
    if argv is None:
        argv = sys.argv

    args = _parse_cml(argv)
    return args.func(args)


if __name__ == '__main__':
    sys.exit(main())
